npm install bcryptjs
npm install --save jsonwebtoken passport passport-local lodash
########
config.json
"development": {
  "PORT": 3000,
  "MONGODB_URI": "mongodb://localhost:27017/DB_Name",
  "JWT_SECRET":"...",
  "JWT_EXP": "2m"
},
"production": {
}
#####
user.model.js
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

var userSchema = new mongoose.Schema({
 fullName: {
    type: String,
    required: 'Full name can\'t be empty'
 },
 email: {
    type: String,
    required: 'Email can\'t be empty',
    unique: true
    
 },
 password: {
    type: String,
    required: 'Password can\'t be empty',
    minlength: [4 ,'password must be at least 4 ch']
 },
 saltScret: string
});

//validation email
userSchema.path('email').validate((val) => {
   emailRegex = ...
   return emailRegex.text(val);
}, 'Invalid email');
...
userSchema.pre('save', function(next) {
  bcrypt.genSalt(10, (err, salt) =>{
     bcrypt.hash(this.password, salt, (err, hash) => {
       this.password = hash;
       this.saltSecret = salt;
       next();
     }
  }
}

//methods
userSchema.methos.verifyPassword = function(password) {
  return bcrypt.compareSync(password, this.password);
};

userSchema.methods.generateJwt = function() {
  return jwt.sign({id: this._id }, process.env.JWT_SECRET,{expiresIn: process.env.JWT_EXP});
}
mongoose.model('User', userSchema);
######
//app.js
require('./config/config');
require('./modles/db');
require('./config/passportConfig');

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const passport = require('passport');
const rtsIndex = require('./routes/index.router');

var app = express();

//middleware
app.use(bodyParser.json());
app.use(cors());
app.use(passport.initialize());

app.use('/api', rtsIndex);

app.use((err, req, res, next) => {
  if(err.name==='ValidationError') {
  }
});

#############################
//passportConfig.js
const passport = require('passport');
const localStrategy = require('passport-local').Strategy;
const mongoose = require('mongoose');

var User = mongoose.model('User');
passport.use(
  new localStrategy({ usernameField: 'email'},
  (username, password, done) ={
    User.findOne({ email: username},
      (err, user) => {
        if(err) {
          return done(err);
        } else if (!user) {
          return done(null, false, { message: 'Email is not registered'});
        }else if (!user.verifyPassword(password)) {
          return done(null, false, { message: 'Wrong password'});
        } else {
          return done(null, user);
        }
      }
    );
  }
  )
);
###############
//user.controller.js
const mongoose = require('mongoose');
const passport = require('passport');
const User = mongoose.model('User');
const _ = require('lodash');

module.exports.register = (req, res, next) =>{
  var user = new User();
  user.fullName = req.body.fullName;
  user.email = req.body.email;
  user.password = req.body.password;
  user.save((err, doc) =>{
    if(!err) {
      res.send(doc);
    } else {
      if(err.code ==11000)
         res.status(422).send(['Duplicate email address found.']); 
         else 
         return next(err);
    }
  });
};
module.exports.authenticate =(req, res, next) => {
  passport.authenticate('local', (err, user, info) =>{
     if (err) {
       return res.status(400).json(err);
     } else if (user) {
       return res.status(200).json({"token": user.generateJwt()});
     } else {
       return res.status(404).json(info);
     }
  })(req, res);
}

model.exports.userProfile =(req, res, next) => {
  user.findOne({_id: req._id}, (err, user) => {
    if(!user) 
     return res.status(404).json({status: false, message:'user record not found'});
    else {
      return res.status(200).json({status: true, user: _.pick(user, ['fullName','email'])});
    }
  });
}

######
index.router.js

const express = require('express');
const router = express.Router();
const ctrlUser =require('../controllers/user.controller');
const jwtHelper = require('./jwtHelper');

router.post('/register', ctrlUser.register);
router.post('/authenticate', ctrlUser.authenticate);
router.get('/userProfile', jwtHelper.verifyJwtToken, ctrlUser.userProfile);
module.exports = router;

#####
jwtHelper.js

const jwt = require('jsonwebtoken');
module.exports.verifyJwtToken(req, res, next) => {
  var token;
  if('authorization' in req.headers) {
    token = req.header['authorization'].split(' ')[1];
  }
  
  if(!token) {
   return res.status(403).send({auth: false, message: 'No token provided'});
  } else {
    jwt.verify(token, process.env.JWT_SECRET, (err, decoded) =>{
       if(err) 
          return res.status(500).send({auth: false, message: 'token authentication failed'});
       else {
          req._id = decoded._id;
          next();
       }
    });
  }
}

